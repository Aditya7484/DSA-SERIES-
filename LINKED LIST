//Array to linked list in this code we print head
#include<iostream>
#include<vector>
using namespace std;
class Node{
  public:
  int data;
  Node* next;
  public:
  Node(int data1,Node* next1){
    data = data1;
    next = next1;
  }
  public:
  Node(int data1){
    data = data1;
    next = nullptr;
  }
};
Node* convertArr2LL(vector<int> &arr){
  Node* head = new Node(arr[0]);
  Node* mover = head;
  for(int i=1;i<arr.size();i++){
    Node* temp = new Node(arr[i]);
    mover->next = temp;
    mover =  temp;
  }
  return head;

}
int main(){
  vector<int> arr = {2 , 5 ,8 ,7};
  Node* head = convertArr2LL(arr);
  cout<< head->data;


}


In this code we print our total linked list
 #include<iostream>
#include<vector>
using namespace std;
class Node {
  public:
  int data;
  Node* next;

  public:
  Node(int data1,Node* next1){
    data = data1;
    next = next1;
  }

  public:
  Node(int data1){
    data = data1;
    next = nullptr;
  }
};
Node* convertArr2LL(vector<int> &arr){
  
  Node* head = new Node(arr[0]);
  Node* mover = head;
  for(int i=1;i<arr.size();i++){
    Node* temp = new Node(arr[i]);
    mover->next = temp;
    mover =  temp;
  }
  return head;

}
int main(){
  vector<int> arr = {2,5,8,7};
  Node* head = convertArr2LL(arr);
  Node* temp = head;
  while(temp){
    cout<<temp->data<<" ";
    temp = temp->next;
  }


}
// length of ll
#include<iostream>
#include<vector>
using namespace std;
class Node {
  public:
  int data;
  Node* next;

  public:
  Node(int data1,Node* next1){
    data = data1;
    next = next1;
  }

  public:
  Node(int data1){
    data = data1;
    next = nullptr;
  }
};
Node* convertArr2LL(vector<int> &arr){
  
  Node* head = new Node(arr[0]);
  Node* mover = head;
  for(int i=1;i<arr.size();i++){
    Node* temp = new Node(arr[i]);
    mover->next = temp;
    mover =  temp;
  }
  return head;

}
int lengthofLL(Node* head){
  int cnt = 0;
  Node* temp = head;
  while(temp){
    temp = temp->next;
    cnt++;

  }
  return cnt;
}
int main(){
  vector<int> arr = {2,5,8,7};
  Node* head = convertArr2LL(arr);
  cout<< lengthofLL(head);


}

in this we check the key in target

#include<iostream>
#include<vector>
using namespace std;
class Node {
  public:
  int data;
  Node* next;

  public:
  Node(int data1,Node* next1){
    data = data1;
    next = next1;
  }

  public:
  Node(int data1){
    data = data1;
    next = nullptr;
  }
};
Node* convertArr2LL(vector<int> &arr){
  
  Node* head = new Node(arr[0]);
  Node* mover = head;
  for(int i=1;i<arr.size();i++){
    Node* temp = new Node(arr[i]);
    mover->next = temp;
    mover =  temp;
  }
  return head;

}
int lengthofLL(Node* head){
  int cnt = 0;
  Node* temp = head;
  while(temp){
    temp = temp->next;
    cnt++;

  }
  return cnt;
}
int checkIfPresent(Node* head,int key){
  Node* temp = head;
  while(temp){
    if(temp->data== key) return 1;
    temp = temp->next;
  }
  return 0;  
    

}

int main(){
  vector<int> arr = {2,5,8,7};
  Node* head = convertArr2LL(arr);
  cout<< checkIfPresent(head , 15);


}
// delete head
#include<iostream>
#include<vector>
using namespace std;
class Node {
  public:
  int data;
  Node* next;

  public:
  Node(int data1,Node* next1){
    data = data1;
    next = next1;
  }

  public:
  Node(int data1){
    data = data1;
    next = nullptr;
  }
};
Node* convertArr2LL(vector<int> &arr){
  
  Node* head = new Node(arr[0]);
  Node* mover = head;
  for(int i=1;i<arr.size();i++){
    Node* temp = new Node(arr[i]);
    mover->next = temp;
    mover =  temp;
  }
  return head;

}

void print(Node* head){
  while(head != NULL){
    cout<<head->data<<" ";
    head = head->next;
  }
  cout<< endl;

}
Node* removesHead(Node* head){
  if(head== NULL) return head;
  Node* temp = head;
  head = head->next;
  delete temp;
  return head;
}

int main(){
  vector<int> arr = {2,5,8,7};
  Node* head = convertArr2LL(arr);
  head = removesHead(head);
  print(head);


}
